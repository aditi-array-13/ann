import numpy as np

def sigmoid(x):
    return 1/(1 + np.exp(-x))

def sigmoid_derivative(x):
    return x*(1-x)

inputs = np.array([[0,0],[0,1],[1,0],[1,1]])
target = np.array([[0],[1],[1],[0]]) #XOR

epochs = 10000
learn_rate = 0.1
input_layer_neurons, hidden_layer_neurons, output_layer_neurons = 2,2,1

hidden_weights = np.random.uniform(size=(input_layer_neurons,hidden_layer_neurons))
hidden_bias = np.random.uniform(size=(1,hidden_layer_neurons))
output_weights = np.random.uniform(size=(hidden_layer_neurons,output_layer_neurons))
output_bias = np.random.uniform(size=(1,output_layer_neurons))


print("Predicted Output: ")
print(*predicted_output)

difference = target - predicted_output
difference

accuracy = 0
for i in range(len(difference)):
    accuracy += difference[i][0]

accuracy = (1 + accuracy/len(difference))*100
print("Average Accuracy of predictions: ",accuracy)

# Training algorithm
for epoch in range(epochs):
    hidden_layer_sum = np.dot(inputs,hidden_weights)
    hidden_layer_sum += hidden_bias
    hidden_layer_output = sigmoid(hidden_layer_sum)
    
    output_layer_sum = np.dot(hidden_layer_output,output_weights)
    output_layer_sum += output_bias
    predicted_output = sigmoid(output_layer_sum)
    
    # Backpropagation
    error = target - predicted_output
    d_predicted_output = error * sigmoid_derivative(predicted_output)
    
    error_hidden = d_predicted_output.dot(output_weights.T)
    d_hidden = error_hidden * sigmoid_derivative(hidden_layer_output)
    
    # Updating weights and biases
    output_weights += hidden_layer_output.T.dot(d_predicted_output)*learn_rate
    output_bias += np.sum(d_predicted_output,axis=0)*learn_rate
    hidden_weights += inputs.T.dot(d_hidden)*learn_rate
    hidden_bias += np.sum(d_hidden,axis=0)*learn_rate


print('Hidden Weights: ')
print(*hidden_weights)
print('Hidden Bias: ')
print(*hidden_bias)
print('Output Weights: ')
print(*output_weights)
print('Output_Bias: ')
print(*output_bias)

